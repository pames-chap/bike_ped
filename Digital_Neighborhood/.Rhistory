column(width = 2, offset = 1,
h2(textOutput("map.tract"))
),
column(width = 2,
uiOutput('tract_location')
),
#PEARSON'S CODE:
column(width = 3, offset = 2,
textInput("myText", "Text Input", placeholder = "Enter text then hit return")
),
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/IRAD Digital Neighborhoods/bike_ped_shiny.R')
runApp('~/Desktop/IRAD Digital Neighborhoods/bike_ped_shiny.R')
runApp('~/Desktop/IRAD Digital Neighborhoods/bike_ped_shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tagList(
div(class = "container-fluid",
#h1("Neighborhood Browser"),
# fluidRow(
#   column(width = 2,
#          uiOutput('map_location')
#   )
# ),
fluidRow(
#  Turn the leaflet background to white
tags$head(
tags$style(HTML(".leaflet-container { background: #ffffff; }"))
),
column(5,
leafletOutput("map", height = 700)
),
column(width = 2, offset = 1,
h2(textOutput("map.tract"))
),
column(width = 2,
uiOutput('tract_location')
),
#PEARSON'S CODE:
column(width = 4, offset = 2,
DT::dataTableOutput("table")
# selectInput("census_tract",
#            "Census Tract:",
#            c("All",
#              unique(bike_ped_model_sweep$census_tract))),
),
)
)
)
runApp()
print(selected_tract)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(map.tract.names)
output$tract_location <- renderUI({
# Get unique names from data to propogate the select input
map.tract.names <- as.vector( unique(norfolk_tract_sp@data$NAME) )
selectInput("tract_locations",
label = "Choose Location",
choices=map.tract.names,
multiple=F)
})
#PEARSON'S CODE:
output$table <- DT::renderDataTable(
DT::datatable(rownames = FALSE, {
if (input$tract_locations != "All") {
bike_ped_model_sweep <- bike_ped_model_sweep[bike_ped_model_sweep$census_tract == input$tract_locations,]
}
bike_ped_model_sweep
}))
print(map.tract.names)
runApp()
tagList(
div(class = "container-fluid",
#h1("Neighborhood Browser"),
# fluidRow(
#   column(width = 2,
#          uiOutput('map_location')
#   )
# ),
fluidRow(
#  Turn the leaflet background to white
tags$head(
tags$style(HTML(".leaflet-container { background: #ffffff; }"))
),
column(5,
leafletOutput("map", height = 700)
),
column(width = 2, offset = 1,
h2(textOutput("map.tract"))
),
column(width = 2,
uiOutput('tract_location')
),
#PEARSON'S CODE:
column(width = 300, offset = 2,
DT::dataTableOutput('table'),
),
)
)
)
View(norfolk_tract_sp)
View(norfolk_tract_sp)
norfolk_tract_sp@data[["GEOID"]]
View(norfolk_tract)
print(norfolk_tract$GEOID)
runApp()
runApp()
runApp()
print(bike_ped_model_sweep[bike_ped_model_sweep$census_tract == norfolk_tract$GEOID,])
runApp()
runApp()
View(norfolk_tract)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bike_ped_model_sweep <- read.csv(here::here("data", "shp", "bike_ped_model_sweep.csv"))
view(bike_ped_model_sweep)
#PEARSON'S CODE:
bike_ped_model_sweep <- read.csv(here::here("data", "shp", "bike_ped_model_sweep.csv"))
#Simplifying DataFrame
bike_ped_model_sweep <- bike_ped_model_sweep %>% filter(mileage_added == 1) %>% select(-mileage_added)
View(bike_ped_model_sweep)
str(norfolk_tract$GEOID)
str(bike_ped_model_sweep$census_tract)
?left_join
# Read in shapefiles and convert to large spatial polygon dataframe
norfolk_tract <- st_read(here::here("data", "shp", "norfolk_tract.shp"))
norfolk_tract_sp <- sf:::as_Spatial(norfolk_tract)
#PEARSON'S CODE:
bike_ped_model_sweep <- read.csv(here::here("data", "shp", "bike_ped_model_sweep.csv"))
#Simplifying DataFrame
bike_ped_model_sweep <- bike_ped_model_sweep %>% filter(mileage_added == 1) %>% select(-mileage_added)
bike_ped_model_sweep <- bike_ped_model_sweep %>% mutate(census_tract = as.character(census_tract))
norfolk_tract <- norfolk_tract %>% left_join(bike_ped_model_sweep, by = c("GEOID" = "census_tract"))
view(norfolk_tract)
runApp()
# Read in shapefiles and convert to large spatial polygon dataframe
norfolk_tract <- st_read(here::here("data", "shp", "norfolk_tract.shp"))
norfolk_tract_sp <- sf:::as_Spatial(norfolk_tract)
#PEARSON'S CODE:
bike_ped_analysis <- read.csv(here::here("data", "shp", "sm_mile4max.csv"))
#Simplifying dataframe
bike_ped_analysis <- bike_ped_analysis %>% filter(mileage_added == 1) %>% select(-mileage_added)
bike_ped_analysis <- bike_ped_analysis %>% mutate(census_tract = as.character(census_tract))
#joining norfolk_tract with bike_ped_model_sweep by GEOID
norfolk_tract <- norfolk_tract %>% left_join(bike_ped_analysis, by = c("GEOID" = "census_tract"))
Read in shapefiles and convert to large spatial polygon dataframe
norfolk_tract <- st_read(here::here("data", "shp", "norfolk_tract.shp"))
norfolk_tract_sp <- sf:::as_Spatial(norfolk_tract)
#PEARSON'S CODE:
bike_ped_analysis <- read.csv(here::here("data", "shp", "sm_mile4max.csv"))
#Simplifying dataframe
#bike_ped_analysis <- bike_ped_analysis %>% filter(mileage_added == 1) %>% select(-mileage_added)
bike_ped_analysis <- bike_ped_analysis %>% mutate(census_tract = as.character(census_tract))
#joining norfolk_tract with bike_ped_model_sweep by GEOID
norfolk_tract <- norfolk_tract %>% left_join(bike_ped_analysis, by = c("GEOID" = "census_tract"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(norfolk_tract)
View(norfolk_tract)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(bike_ped_analysis)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidPage(
titlePanel("Census Tract Map"),
sidebarLayout(
sidebarPanel(
fluidRow(column(width = 10,
textOutput("tract_diabetes_improvement"),
textOutput("tract_bp_improvement"),
textOutput("tract_poor_phys_health_improvement")))
),
mainPanel(
tagList(
div(class = "container-fluid",
#h1("Neighborhood Browser"),
# fluidRow(
#   column(width = 2,
#          uiOutput('map_location')
#   )
# ),
fluidRow(
#  Turn the leaflet background to white
tags$head(
tags$style(HTML(".leaflet-container { background: #ffffff; }"))
),
column(5,
leafletOutput("map", height = 700)
),
column(width = 2, offset = 1,
h2(textOutput("map.tract"))
),
column(width = 2,
uiOutput('tract_location')
),
),
),
)
width = 12),
position = "right",
fluid = TRUE
),
DT::dataTableOutput('table')
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidPage(
titlePanel("Census Tract Map"),
sidebarLayout(
sidebarPanel(
fluidRow(
column(width = 10,
textOutput("tract_diabetes_improvement"),
textOutput("tract_bp_improvement"),
textOutput("tract_poor_phys_health_improvement")
)
)
),
mainPanel(
tagList(
div(class = "container-fluid",
#h1("Neighborhood Browser"),
# fluidRow(
#   column(width = 2,
#          uiOutput('map_location')
#   )
# ),
fluidRow(
#  Turn the leaflet background to white
tags$head(
tags$style(HTML(".leaflet-container { background: #ffffff; }"))
),
column(8,
leafletOutput("map", width = "100%", height = 700)
),
column(width = 2, offset = 1,
h2(textOutput("map.tract"))
),
column(width = 2,
uiOutput('tract_location'))
),
),
),
width = 10),
position = "right",
fluid = TRUE
),
)
runApp()
fluidPage(
titlePanel("Census Tract Map"),
sidebarLayout(
sidebarPanel(
fluidRow(
column(width = 10,
textOutput("tract_diabetes_improvement"),
textOutput("tract_bp_improvement"),
textOutput("tract_poor_phys_health_improvement")
)
)
),
mainPanel(
tagList(
div(class = "container-fluid",
#h1("Neighborhood Browser"),
# fluidRow(
#   column(width = 2,
#          uiOutput('map_location')
#   )
# ),
fluidRow(
#  Turn the leaflet background to white
tags$head(
tags$style(HTML(".leaflet-container { background: #ffffff; }"))
),
column(8,
leafletOutput("map", width = "100%", height = 700)
),
column(width = 2, offset = 1,
h2(textOutput("map.tract"))
),
column(width = 2,
uiOutput('tract_location')
),
column(DT::dataTableOutput('table'))
),
),
),
width = 10),
position = "right",
fluid = TRUE
),
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidPage(
titlePanel("Census Tract Map"),
sidebarLayout(
sidebarPanel(
fluidRow(
column(width = 6,
uiOutput('tract_location'))
),
width = 4),
mainPanel(
tagList(
div(class = "container-fluid",
#h1("Neighborhood Browser"),
# fluidRow(
#   column(width = 2,
#          uiOutput('map_location')
#   )
# ),
fluidRow(
#  Turn the leaflet background to white
tags$head(
tags$style(HTML(".leaflet-container { background: #ffffff; }"))
),
column(width = 8,
leafletOutput("map", width = "100%", height = 700)
),
column(width = 3, offset = 1,
h2(textOutput("map.tract"))
),
# column(width = 3,
#        uiOutput('tract_location'))
column(width = 10,
textOutput("tract_diabetes_improvement"),
textOutput("tract_bp_improvement"),
textOutput("tract_poor_phys_health_improvement"))
),
),
),
width = 8),
position = "left",
fluid = FALSE
),
fluidRow(
column(width = 5,
DT::dataTableOutput('table'))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
